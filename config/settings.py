"""
Django settings for your project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from typing import Dict, List

import environ


class ENV_NAMES:
    LOCAL = "local"
    TEST = "test"
    PRODUCTION = "production"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env()
_DOT_ENV = os.path.join(BASE_DIR, ".env")
if os.path.exists(_DOT_ENV):
    env.read_env(_DOT_ENV)

ENV_NAME = env("DJANGO_ENV_NAME", default=ENV_NAMES.PRODUCTION)

if ENV_NAME != ENV_NAMES.LOCAL:
    # https://docs.djangoproject.com/en/2.2/ref/settings/#debug
    DEBUG = env.bool("DJANGO_DEBUG", default=False)
else:
    # https://docs.djangoproject.com/en/2.2/ref/settings/#debug
    DEBUG = env.bool("DJANGO_DEBUG", default=True)

# Application definition
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
THIRD_PARTY_APPS: List[str] = []
LOCAL_APPS = ["apps.blog.apps.BlogConfig"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
if "DATABASE_URL" in os.environ:
    # read os.environ['DATABASE_URL']
    DATABASES = {"default": env.db()}
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
DATABASES["default"]["ATOMIC_REQUESTS"] = True
if ENV_NAME == ENV_NAMES.PRODUCTION:
    DATABASES["default"]["CONN_MAX_AGE"] = env.int("CONN_MAX_AGE", default=60)

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
VALIDATORS_PREFIX = "django.contrib.auth.password_validation."
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "{}UserAttributeSimilarityValidator".format(VALIDATORS_PREFIX)},
    {"NAME": "{}MinimumLengthValidator".format(VALIDATORS_PREFIX)},
    {"NAME": "{}CommonPasswordValidator".format(VALIDATORS_PREFIX)},
    {"NAME": "{}NumericPasswordValidator".format(VALIDATORS_PREFIX)},
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = "ja"
# LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Tokyo"
# TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Managing files
# https://docs.djangoproject.com/en/2.2/topics/files/
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Security
# https://docs.djangoproject.com/en/2.2/topics/security/
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
X_FRAME_OPTIONS = "DENY"

if env.bool("USE_HTTPS", default=False):
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # HSTS
    SECURE_HSTS_SECONDS = 10
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

if ENV_NAME == ENV_NAMES.PRODUCTION:
    # https://docs.djangoproject.com/en/2.2/ref/settings/#secret-key
    SECRET_KEY = env("DJANGO_SECRET_KEY")
    # https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts
    ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS")
else:
    # https://docs.djangoproject.com/en/2.2/ref/settings/#secret-key
    SECRET_KEY = env("DJANGO_SECRET_KEY", default="!!!SET DJANGO_SECRET_KEY!!!")
    # https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"] + env.list(
        "DJANGO_ALLOWED_HOSTS", default=[]
    )

if ENV_NAME == ENV_NAMES.TEST:
    # https://docs.djangoproject.com/en/2.2/ref/settings/#password-hashers
    PASSWORD_HASHERS = ["django.contrib.auth.hashers.MD5PasswordHasher"]

# Email
# https://docs.djangoproject.com/en/2.2/topics/email/
if ENV_NAME == ENV_NAMES.LOCAL:
    # https://docs.djangoproject.com/en/2.2/ref/settings/#email-host
    EMAIL_HOST = env("EMAIL_HOST", default="localhost")
    # https://docs.djangoproject.com/en/2.2/ref/settings/#email-port
    EMAIL_PORT = 1025
elif ENV_NAME == ENV_NAMES.TEST:
    # https://docs.djangoproject.com/en/2.2/ref/settings/#email-backend
    EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"

# Logging
# https://docs.djangoproject.com/en/2.2/ref/settings/#logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}},
    "formatters": {
        "verbose_django": {
            "format": "%(asctime)s %(levelname)s %(module)s "
            "%(process)d %(thread)d %(message)s"
        },
        "verbose_apps": {
            "format": "%(asctime)s %(levelname)s %(pathname)s:%(lineno)d "
            "%(process)d %(thread)d %(message)s"
        },
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
        "console_django": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose_django",
        },
        "console_apps": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose_apps",
        },
    },
    "loggers": {
        "django.request": {
            "level": "WARNING",
            "handlers": ["console_django"],
            "propagate": False,
        },
        "django.db.backends": {
            "level": "WARNING",
            "handlers": ["console_django"],
            "propagate": False,
        },
        "django.security": {
            "level": "WARNING",
            "handlers": ["console_django"],
            "propagate": False,
        },
        "django.security.DisallowedHost": {
            "level": "ERROR",
            "handlers": ["console_django", "mail_admins"],
            "propagate": True,
        },
        "apps": {  # apps log
            "level": "WARNING",
            "handlers": ["console_apps"],
            "propagate": False,
        },
    },
}

# django-filter
# https://django-filter.readthedocs.io/en/master/
THIRD_PARTY_APPS += ["django_filters"]

# django-health-check
# https://github.com/KristianOellegaard/django-health-check
THIRD_PARTY_APPS += [
    "health_check",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
]

# django-cors-headers
# https://github.com/adamchainz/django-cors-headers
THIRD_PARTY_APPS += ["corsheaders"]
MIDDLEWARE.insert(
    MIDDLEWARE.index("django.middleware.common.CommonMiddleware"),
    "corsheaders.middleware.CorsMiddleware",
)
CORS_ORIGIN_WHITELIST = env.list("DJANGO_CORS_ORIGIN_WHITELIST", default=[])

# django-csp
# https://github.com/mozilla/django-csp
MIDDLEWARE += ["csp.middleware.CSPMiddleware"]
CSP_DEFAULT_SRC = ["'self'"] + env.list("DJANGO_CSP_DEFAULT_SRC", default=[])

# django-feature-policy
# https://github.com/adamchainz/django-feature-policy
MIDDLEWARE.insert(
    MIDDLEWARE.index("django.middleware.security.SecurityMiddleware") + 1,
    "django_feature_policy.FeaturePolicyMiddleware",
)

# django-http-referrer-policy
# https://github.com/DmytroLitvinov/django-http-referrer-policy
THIRD_PARTY_APPS += ["django_http_referrer_policy"]
MIDDLEWARE += ["django_http_referrer_policy.middleware.ReferrerPolicyMiddleware"]
REFERRER_POLICY = env("DJANGO_REFERRER_POLICY", default="same-origin")

# django-anymail
# https://anymail.readthedocs.io/
if ENV_NAME == ENV_NAMES.PRODUCTION and env.bool("USE_ANYMAIL", default=False):
    # https://anymail.readthedocs.io/en/stable/
    THIRD_PARTY_APPS += ["anymail"]
    ANYMAIL = {
        "MAILGUN_API_KEY": env("DJANGO_MAILGUN_API_KEY"),
        "MAILGUN_DOMAIN": env("DJANGO_MAILGUN_DOMAIN"),
    }
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    # https://docs.djangoproject.com/en/2.2/ref/settings/#default-from-email
    DEFAULT_FROM_EMAIL = env("DJANGO_DEFAULT_FROM_EMAIL", default="webmaster@localhost")
    # https://docs.djangoproject.com/en/2.2/ref/settings/#server-email
    SERVER_EMAIL = env("DJANGO_SERVER_EMAIL", default="root@localhost")

# WhiteNoise
# http://whitenoise.evans.io/en/latest/django.html
if env("DJANGO_STORAGE", default="") == "whitenoise":
    MIDDLEWARE.insert(
        MIDDLEWARE.index("django.middleware.security.SecurityMiddleware") + 1,
        "whitenoise.middleware.WhiteNoiseMiddleware",
    )
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# django-storages
# https://django-storages.readthedocs.io/en/latest/
if env("DJANGO_STORAGE", default="") == "s3":
    THIRD_PARTY_APPS += ["storages"]

    AWS_ACCESS_KEY_ID = env("DJANGO_AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = env("DJANGO_AWS_SECRET_ACCESS_KEY")

    AWS_S3_REGION_NAME = env("DJANGO_AWS_S3_REGION_NAME", default=None)
    AWS_STORAGE_BUCKET_NAME = env("DJANGO_AWS_STORAGE_BUCKET_NAME")
    AWS_S3_CUSTOM_DOMAIN = "{}.s3.amazonaws.com".format(AWS_STORAGE_BUCKET_NAME)
    _DJANGO_S3_CACHE_MAX_AGE = 60 * 60 * 24 * 7
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age={}, s-maxage={}, must-revalidate".format(
            _DJANGO_S3_CACHE_MAX_AGE, _DJANGO_S3_CACHE_MAX_AGE
        )
    }

    from storages.backends.s3boto3 import S3Boto3Storage

    class StaticS3Boto3Storage(S3Boto3Storage):
        bucket_name = AWS_STORAGE_BUCKET_NAME
        location = "static"

    class MediaS3Boto3Storage(S3Boto3Storage):
        bucket_name = AWS_STORAGE_BUCKET_NAME
        location = "media"
        file_overwrite = False

    STATICFILES_STORAGE = "config.settings.StaticS3Boto3Storage"
    STATIC_URL = "https://{}.s3.amazonaws.com/static/".format(AWS_STORAGE_BUCKET_NAME)
    DEFAULT_FILE_STORAGE = "config.settings.MediaS3Boto3Storage"
    MEDIA_URL = "https://{}.s3.amazonaws.com/media/".format(AWS_STORAGE_BUCKET_NAME)

if DEBUG:
    # django-debug-toolbar
    # https://django-debug-toolbar.readthedocs.io/en/latest/
    THIRD_PARTY_APPS += ["debug_toolbar"]
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    INTERNAL_IPS = ["127.0.0.1", "10.0.2.2"]

    if env("USE_DOCKER", default="no") == "yes":
        import socket

        _, _, ips = socket.gethostbyname_ex(socket.gethostname())  # type: ignore
        INTERNAL_IPS += [ip[:-1] + "1" for ip in ips]

    # django-extensions
    # https://django-extensions.readthedocs.io/en/latest/
    THIRD_PARTY_APPS += ["django_extensions"]

    # django-silk
    # https://github.com/jazzband/django-silk
    THIRD_PARTY_APPS += ["silk"]
    MIDDLEWARE += ["silk.middleware.SilkyMiddleware"]

# Django REST framework
# https://www.django-rest-framework.org/
THIRD_PARTY_APPS += ["rest_framework"]
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "60/min", "user": "60/min"},
    # "DEFAULT_RENDERER_CLASSES": [
    #     "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
    #     "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    # ],
    # "DEFAULT_PARSER_CLASSES": [
    #     "djangorestframework_camel_case.parser.CamelCaseFormParser",
    #     "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
    #     "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    # ],
}

# DRF Simple JWT
# https://github.com/davesque/django-rest-framework-simplejwt
REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"] = [
    "rest_framework.authentication.SessionAuthentication",
    "rest_framework_simplejwt.authentication.JWTAuthentication",
]
SIMPLE_JWT = {"AUTH_HEADER_TYPES": ["JWT"]}

# djoser
# https://djoser.readthedocs.io/
THIRD_PARTY_APPS += ["djoser"]

# graphene-django
# https://docs.graphene-python.org/projects/django/en/latest/
THIRD_PARTY_APPS += ["graphene_django"]
GRAPHENE: Dict[str, object] = {"SCHEMA": "config.schema.schema"}
if DEBUG:
    GRAPHENE["MIDDLEWARE"] = ["graphene_django.debug.DjangoDebugMiddleware"]


INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS
